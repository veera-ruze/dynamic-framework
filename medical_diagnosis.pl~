% Main procedure

go(Patient) :-
    hypothesis(Patient, Disease),
    write_list([Patient, ', probably has ', Disease, '.']), nl,
    undo.

go(Patient) :-
    write_list([Patient, ', I don\'t seem to be able to diagnose the disease.']), nl,
    undo.

go :-
    write('What is the patient\'s name? '),
    read_line_to_string(user_input, Patient), % Read input as string
    hypothesis(Patient, Disease),
    write_list([Patient, ', probably has ', Disease, '.']), nl,
    undo.

go :-
    write('Sorry, I don\'t seem to be able to diagnose the disease.'), nl,
    undo.

% Symptoms as facts and rules
symptom(Patient, fever) :-
    verify(Patient, ' have a fever (y/n)?').
symptom(Patient, rash) :-
    verify(Patient, ' have a rash (y/n)?').
symptom(Patient, headache) :-
    verify(Patient, ' have a headache (y/n)?').
symptom(Patient, runny_nose) :-
    verify(Patient, ' have a runny nose (y/n)?').
symptom(Patient, conjunctivitis) :-
    verify(Patient, ' have conjunctivitis (y/n)?').
symptom(Patient, cough) :-
    verify(Patient, ' have a cough (y/n)?').
symptom(Patient, body_ache) :-
    verify(Patient, ' have body aches (y/n)?').
symptom(Patient, chills) :-
    verify(Patient, ' have chills (y/n)?').
symptom(Patient, sore_throat) :-
    verify(Patient, ' have a sore throat (y/n)?').
symptom(Patient, sneezing) :-
    verify(Patient, ' have sneezing (y/n)?').
symptom(Patient, swollen_glands) :-
    verify(Patient, ' have swollen glands (y/n)?').

% Asking the user

ask(Patient, Question) :-
    write(Patient), write(', do you'), write(Question), write(' '),
    read(Response),
    (   Response == '' -> % Check for empty input
            write('No input provided. Please enter yes/y or no/n.'), nl,
            ask(Patient, Question);
        member(Response, [yes, y]) ->
            assertz(yes(Question));
        member(Response, [no, n]) ->
            assertz(no(Question)), fail;
        Response == exit ->
            write('Exiting...'), nl, fail;
        write('Invalid response. Please enter yes/y or no/n.'), nl,
        ask(Patient, Question)
    ).

% Dynamic predicates to store yes/no responses
:- dynamic yes/1, no/1.

% Verifying symptoms
verify(Patient, Symptom) :-
    (yes(Symptom) ->
        true ;
        (no(Symptom) ->
            fail ;
            ask(Patient, Symptom))).

% Undoing stored responses
undo :- retract(yes(_)), fail.
undo :- retract(no(_)), fail.
undo.

% Hypotheses
hypothesis(Patient, german_measles) :-
    symptom(Patient, fever),
    symptom(Patient, headache),
    symptom(Patient, runny_nose),
    symptom(Patient, rash).

hypothesis(Patient, common_cold) :-
    symptom(Patient, headache),
    symptom(Patient, sneezing),
    symptom(Patient, sore_throat),
    symptom(Patient, runny_nose),
    symptom(Patient, chills).

hypothesis(Patient, measles) :-
    symptom(Patient, cough),
    symptom(Patient, sneezing),
    symptom(Patient, runny_nose).

hypothesis(Patient, flu) :-
    symptom(Patient, fever),
    symptom(Patient, headache),
    symptom(Patient, body_ache),
    symptom(Patient, conjunctivitis),
    symptom(Patient, chills),
    symptom(Patient, sore_throat),
    symptom(Patient, runny_nose),
    symptom(Patient, cough).

hypothesis(Patient, mumps) :-
    symptom(Patient, fever),
    symptom(Patient, swollen_glands).

hypothesis(Patient, chicken_pox) :-
    symptom(Patient, fever),
    symptom(Patient, chills),
    symptom(Patient, body_ache),
    symptom(Patient, rash).

% Utility to write a list
write_list([]).
write_list([Head | Tail]) :-
    write(Head),
    write_list(Tail).
